{
  "version": 3,
  "sources": ["../src/rsa/safePow.ts", "../src/BinaryHelper.ts", "../src/rsa/PublicComponent.ts", "../src/rsa/KeyPair.ts", "../src/rsa/RSAGenerator.ts", "../src/CryptoRSA.ts", "../src/SeededRandom.ts", "../src/SeededRSA.ts"],
  "sourcesContent": ["export default function safePow(a, b, n) {\n    a = BigInt(a);\n    b = BigInt(b);\n    n = BigInt(n);\n\n    a = a % n;\n    let result = 1n;\n    let x = a;\n\n\n    while (b > 0) {\n        let leastSignificantBit = b % 2n;\n        b = b / 2n;\n\n        if (leastSignificantBit === 1n) {\n            result = result * x;\n            result = result % n;\n        }\n\n        x = x * x;\n        x = x % n;\n    }\n\n    return result;\n}", "export default abstract class BinaryHelper {\n    static bigIntToString(input: bigint): string {\n        let string = \"\";\n\n        while (input !== 0n) {\n            string = String.fromCharCode(Number(input & 255n)) + string;\n            input = input >> 8n;\n        }\n\n        return string;\n    }\n\n    static stringToBigInt(input: string): bigint {\n        let chars = input.split(\"\");\n        let bigInt = 0n;\n\n        for (let char of chars) {\n            let charCode = char.charCodeAt(0);\n\n            bigInt = bigInt << 8n;\n            bigInt = bigInt | BigInt(charCode);\n        }\n\n        return bigInt;\n    }\n\n    static bigIntToBase64(input: bigint): string {\n        return btoa(BinaryHelper.bigIntToString(input));\n    }\n\n    static base64toBigInt(input: string) {\n        return BinaryHelper.stringToBigInt(atob(input));\n    }\n}\n", "import safePow from \"./safePow\";\nimport BinaryHelper from \"../BinaryHelper\";\n\nexport default class PublicComponent {\n    protected readonly N: bigint;\n    protected readonly e: bigint;\n\n    constructor(N: bigint, e: bigint) {\n        this.N = N;\n        this.e = e;\n    }\n\n    encrypt(message: string) {\n        let chunks = this.toChunks(message);\n\n        return chunks.map(chunk => {\n            let binary = safePow(BinaryHelper.stringToBigInt(chunk), this.e, this.N);\n            return BinaryHelper.bigIntToBase64(binary);\n        })\n            .join(\"$\");\n    }\n\n    checkSignature(message: string, signature: string): boolean {\n        let messageChunks = this.toChunks(message);\n        let signatureChunks = signature.split(\"$\");\n\n        if (messageChunks.length !== signatureChunks.length) {\n            return false;\n        }\n\n        for (let i = 0; i < messageChunks.length; i++) {\n            let messagePart = messageChunks[i];\n            let signaturePart = signatureChunks[i];\n\n            let signatureBigInt = BinaryHelper.base64toBigInt(signaturePart);\n            let verifier = safePow(signatureBigInt, this.e, this.N);\n\n            if (messagePart !== BinaryHelper.bigIntToString(verifier)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    protected toChunks(string: string): string[] {\n        let chunkLength = this.N.toString(2).length / 8;\n        let chunks = [];\n\n        while (string.length > chunkLength) {\n            let chunk = string.slice(0, chunkLength);\n\n            chunks.push(chunk);\n            string = string.slice(chunkLength);\n        }\n\n        if (string !== \"\") {\n            chunks.push(string);\n        }\n\n        return chunks;\n    }\n\n    toString() {\n        return BinaryHelper.bigIntToBase64(this.N)\n            + \"$\" + BinaryHelper.bigIntToBase64(this.e)\n    }\n\n    static fromString(string: string) {\n        let [N, e] = string.split(\"$\");\n\n        return new PublicComponent(\n            BinaryHelper.base64toBigInt(N),\n            BinaryHelper.base64toBigInt(e)\n        );\n    }\n}\n", "import safePow from \"./safePow\";\nimport BinaryHelper from \"../BinaryHelper\";\nimport PublicComponent from \"./PublicComponent\";\n\nexport default class KeyPair extends PublicComponent {\n    private readonly p: bigint;\n    private readonly q: bigint;\n    private readonly L: bigint;\n    private readonly d: bigint;\n\n    constructor(p: bigint, q: bigint, e: bigint) {\n        super(p * q, e)\n\n        this.p = p;\n        this.q = q;\n\n        this.L = (p - 1n) * (q - 1n);\n        this.d = this.modInverse(e, this.L);\n    }\n\n    extractPublicComponent(): PublicComponent {\n        return new PublicComponent(this.N, this.e);\n    }\n\n    decrypt(message: string) {\n        let chunks = message.split(\"$\");\n        return chunks.map(chunk => {\n            let bigInt = BinaryHelper.base64toBigInt(chunk);\n            return BinaryHelper.bigIntToString(safePow(bigInt, this.d, this.N));\n        })\n            .join(\"\")\n    }\n\n    sign(message: string): string {\n        let chunks = this.toChunks(message);\n\n        return chunks.map(chunk => {\n            let bitInt = BinaryHelper.stringToBigInt(chunk);\n            let signature = safePow(bitInt, this.d, this.N);\n\n            return BinaryHelper.bigIntToBase64(signature);\n        })\n            .join(\"$\");\n    }\n\n    private modInverse(a: bigint, n: bigint): bigint {\n        let n0 = n;\n        let y = 0n;\n        let x = 1n;\n\n        if (n == 1n) return 0n;\n\n        while (a > 1n) {\n            let q = a / n;\n            let t = n;\n\n            n = a % n;\n            a = t;\n            t = y;\n\n            y = x - q * t;\n            x = t;\n        }\n\n        if (x < 0) {\n            x = x + n0\n        }\n\n        return x;\n    }\n\n    toString() {\n        return BinaryHelper.bigIntToBase64(this.p)\n            + \"$\" + BinaryHelper.bigIntToBase64(this.q)\n            + \"$\" + BinaryHelper.bigIntToBase64(this.e);\n    }\n\n    static fromString(string: string) {\n        let [p, q, e] = string.split(\"$\");\n\n        return new KeyPair(\n            BinaryHelper.base64toBigInt(p),\n            BinaryHelper.base64toBigInt(q),\n            BinaryHelper.base64toBigInt(e)\n        );\n    }\n}\n", "import KeyPair from \"./KeyPair\";\nimport safePow from \"./safePow\";\n\nexport default abstract class RSAGenerator {\n    private readonly n: number;\n    private readonly e: number;\n\n    public k: number = 500;\n    public ensureKey: boolean = true;\n\n    protected abstract randomBit(): boolean;\n\n    constructor(n: number, e: number = 65537) {\n        this.n = n;\n        this.e = e;\n    }\n\n    async generateKeypair() {\n        let p = await this.generateComponent(this.n / 2);\n        let q = await this.generateComponent(this.n - (this.n / 2));\n\n        if (p < q) {\n            let t = p;\n            p = q;\n            q = t;\n        }\n\n        return new KeyPair(p, q, BigInt(this.e));\n    }\n\n    private async generateComponent(length: number, e: bigint = 65537n): Promise<bigint> {\n        let component = e + 1n;\n\n        while (component % e === 1n) {\n            component = await this.generatePrime(length);\n        }\n\n        return component;\n    }\n\n    private async generatePrime(length: number): Promise<bigint> {\n        while (this.ensureKey) {\n            let randomBigint = this.randomBigintFromLength(length, 0b11n);\n            randomBigint = randomBigint | 1n;\n\n            let result = this.findPrime(length, randomBigint);\n\n            if (result !== 0n) {\n                return result;\n            }\n\n            if (!this.ensureKey) {\n                throw new Error(\"No prime after K\");\n            }\n        }\n    }\n\n    private randomBigintFromLength(n: number, component: bigint = 0n): bigint {\n        let offset = component.toString(2).length;\n\n        for (let i = 0; i < (n - offset); i++) {\n            component = component << 1n;\n\n            if (this.randomBit()) {\n                component = component | 1n;\n            }\n        }\n\n        return component;\n    }\n\n    private findPrime(n: number, startingNumber: bigint): bigint {\n        let number = startingNumber;\n\n        let maxK = (n * Math.log(2)) / 2;\n\n        for (let i = 0; i < maxK; i++) {\n            if (this.checkPrime(number)) {\n                return number;\n            }\n\n            number += 2n;\n        }\n\n        return 0n;\n    }\n\n    private checkPrime(n: bigint): boolean {\n        if (n === 2n || n === 3n) {\n            return true;\n        }\n\n        if (n % 2n === 0n || n < 2n) {\n            return false;\n        }\n\n        for (let i = 2n; i < 1000n; i++) {\n            if (n % i === 0n) {\n                return false;\n            }\n        }\n\n        return this.millerRabin(n);\n    }\n\n    private millerRabin(n: bigint): boolean {\n        let s = 0n;\n        let d = n - 1n;\n\n        while ((d & 1n) === 0n) {\n            d >>= 1n;\n            ++s;\n        }\n\n        let base = 2n;\n        let x = safePow(base, d, n);\n\n        if (x === 1n || x === n - 1n) {\n            return true;\n        }\n\n        for (let i = 0n; i <= s; i++) {\n            x = safePow(x, x, n);\n\n            if (x === n - 1n) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n", "import RSAGenerator from \"./rsa/RSAGenerator\";\n\nexport default class CryptoRSA extends RSAGenerator {\n    protected randomBit(): boolean {\n        let i = new Uint8Array(1);\n        crypto.getRandomValues(i);\n        \n        return i[0] % 2 === 0;\n    }\n}", "export default class SeededRandom {\n    private currentValue: bigint;\n\n    constructor(seed: bigint) {\n        this.currentValue = seed;\n    }\n\n    next() {\n        return this.currentValue = this.currentValue * 16807n % 2147483647n;\n    }\n}\n", "import RSAGenerator from \"./rsa/RSAGenerator\";\nimport SeededRandom from \"./SeededRandom\";\n\nexport default class SeededRSA extends RSAGenerator {\n    private randomGenerator: SeededRandom;\n\n    protected randomBit(): boolean {\n        return this.randomGenerator.next() % 2n === 0n;\n    }\n\n    async generateSeeded(seed: bigint) {\n        this.randomGenerator = new SeededRandom(seed);\n        return super.generateKeypair();\n    }\n}\n"],
  "mappings": ";;AAAe,mBAAiB,GAAG,GAAG,GAAG;AACrC,QAAI,OAAO;AACX,QAAI,OAAO;AACX,QAAI,OAAO;AAEX,QAAI,IAAI;AACR,QAAI,SAAS;AACb,QAAI,IAAI;AAGR,WAAO,IAAI,GAAG;AACV,UAAI,sBAAsB,IAAI;AAC9B,UAAI,IAAI;AAER,UAAI,wBAAwB,IAAI;AAC5B,iBAAS,SAAS;AAClB,iBAAS,SAAS;AAAA;AAGtB,UAAI,IAAI;AACR,UAAI,IAAI;AAAA;AAGZ,WAAO;AAAA;;;ACvBX,2BAA2C;AAAA,WAChC,eAAe,OAAuB;AACzC,UAAI,SAAS;AAEb,aAAO,UAAU,IAAI;AACjB,iBAAS,OAAO,aAAa,OAAO,QAAQ,SAAS;AACrD,gBAAQ,SAAS;AAAA;AAGrB,aAAO;AAAA;AAAA,WAGJ,eAAe,OAAuB;AACzC,UAAI,QAAQ,MAAM,MAAM;AACxB,UAAI,SAAS;AAEb,eAAS,QAAQ,OAAO;AACpB,YAAI,WAAW,KAAK,WAAW;AAE/B,iBAAS,UAAU;AACnB,iBAAS,SAAS,OAAO;AAAA;AAG7B,aAAO;AAAA;AAAA,WAGJ,eAAe,OAAuB;AACzC,aAAO,KAAK,aAAa,eAAe;AAAA;AAAA,WAGrC,eAAe,OAAe;AACjC,aAAO,aAAa,eAAe,KAAK;AAAA;AAAA;;;AC5BhD,8BAAqC;AAAA,IAIjC,YAAY,GAAW,GAAW;AAC9B,WAAK,IAAI;AACT,WAAK,IAAI;AAAA;AAAA,IAGb,QAAQ,SAAiB;AACrB,UAAI,SAAS,KAAK,SAAS;AAE3B,aAAO,OAAO,IAAI,WAAS;AACvB,YAAI,SAAS,QAAQ,aAAa,eAAe,QAAQ,KAAK,GAAG,KAAK;AACtE,eAAO,aAAa,eAAe;AAAA,SAElC,KAAK;AAAA;AAAA,IAGd,eAAe,SAAiB,WAA4B;AACxD,UAAI,gBAAgB,KAAK,SAAS;AAClC,UAAI,kBAAkB,UAAU,MAAM;AAEtC,UAAI,cAAc,WAAW,gBAAgB,QAAQ;AACjD,eAAO;AAAA;AAGX,eAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,YAAI,cAAc,cAAc;AAChC,YAAI,gBAAgB,gBAAgB;AAEpC,YAAI,kBAAkB,aAAa,eAAe;AAClD,YAAI,WAAW,QAAQ,iBAAiB,KAAK,GAAG,KAAK;AAErD,YAAI,gBAAgB,aAAa,eAAe,WAAW;AACvD,iBAAO;AAAA;AAAA;AAIf,aAAO;AAAA;AAAA,IAGD,SAAS,QAA0B;AACzC,UAAI,cAAc,KAAK,EAAE,SAAS,GAAG,SAAS;AAC9C,UAAI,SAAS;AAEb,aAAO,OAAO,SAAS,aAAa;AAChC,YAAI,QAAQ,OAAO,MAAM,GAAG;AAE5B,eAAO,KAAK;AACZ,iBAAS,OAAO,MAAM;AAAA;AAG1B,UAAI,WAAW,IAAI;AACf,eAAO,KAAK;AAAA;AAGhB,aAAO;AAAA;AAAA,IAGX,WAAW;AACP,aAAO,aAAa,eAAe,KAAK,KAClC,MAAM,aAAa,eAAe,KAAK;AAAA;AAAA,WAG1C,WAAW,QAAgB;AAC9B,UAAI,CAAC,GAAG,KAAK,OAAO,MAAM;AAE1B,aAAO,IAAI,gBACP,aAAa,eAAe,IAC5B,aAAa,eAAe;AAAA;AAAA;;;ACrExC,8BAAqC,gBAAgB;AAAA,IAMjD,YAAY,GAAW,GAAW,GAAW;AACzC,YAAM,IAAI,GAAG;AAEb,WAAK,IAAI;AACT,WAAK,IAAI;AAET,WAAK,IAAK,KAAI,MAAO,KAAI;AACzB,WAAK,IAAI,KAAK,WAAW,GAAG,KAAK;AAAA;AAAA,IAGrC,yBAA0C;AACtC,aAAO,IAAI,gBAAgB,KAAK,GAAG,KAAK;AAAA;AAAA,IAG5C,QAAQ,SAAiB;AACrB,UAAI,SAAS,QAAQ,MAAM;AAC3B,aAAO,OAAO,IAAI,WAAS;AACvB,YAAI,SAAS,aAAa,eAAe;AACzC,eAAO,aAAa,eAAe,QAAQ,QAAQ,KAAK,GAAG,KAAK;AAAA,SAE/D,KAAK;AAAA;AAAA,IAGd,KAAK,SAAyB;AAC1B,UAAI,SAAS,KAAK,SAAS;AAE3B,aAAO,OAAO,IAAI,WAAS;AACvB,YAAI,SAAS,aAAa,eAAe;AACzC,YAAI,YAAY,QAAQ,QAAQ,KAAK,GAAG,KAAK;AAE7C,eAAO,aAAa,eAAe;AAAA,SAElC,KAAK;AAAA;AAAA,IAGN,WAAW,GAAW,GAAmB;AAC7C,UAAI,KAAK;AACT,UAAI,IAAI;AACR,UAAI,IAAI;AAER,UAAI,KAAK;AAAI,eAAO;AAEpB,aAAO,IAAI,IAAI;AACX,YAAI,IAAI,IAAI;AACZ,YAAI,IAAI;AAER,YAAI,IAAI;AACR,YAAI;AACJ,YAAI;AAEJ,YAAI,IAAI,IAAI;AACZ,YAAI;AAAA;AAGR,UAAI,IAAI,GAAG;AACP,YAAI,IAAI;AAAA;AAGZ,aAAO;AAAA;AAAA,IAGX,WAAW;AACP,aAAO,aAAa,eAAe,KAAK,KAClC,MAAM,aAAa,eAAe,KAAK,KACvC,MAAM,aAAa,eAAe,KAAK;AAAA;AAAA,WAG1C,WAAW,QAAgB;AAC9B,UAAI,CAAC,GAAG,GAAG,KAAK,OAAO,MAAM;AAE7B,aAAO,IAAI,QACP,aAAa,eAAe,IAC5B,aAAa,eAAe,IAC5B,aAAa,eAAe;AAAA;AAAA;;;AChFxC,2BAA2C;AAAA,IASvC,YAAY,GAAW,IAAY,OAAO;AALnC,eAAY;AACZ,uBAAqB;AAKxB,WAAK,IAAI;AACT,WAAK,IAAI;AAAA;AAAA,UAGP,kBAAkB;AACpB,UAAI,IAAI,MAAM,KAAK,kBAAkB,KAAK,IAAI;AAC9C,UAAI,IAAI,MAAM,KAAK,kBAAkB,KAAK,IAAK,KAAK,IAAI;AAExD,UAAI,IAAI,GAAG;AACP,YAAI,IAAI;AACR,YAAI;AACJ,YAAI;AAAA;AAGR,aAAO,IAAI,QAAQ,GAAG,GAAG,OAAO,KAAK;AAAA;AAAA,UAG3B,kBAAkB,QAAgB,IAAY,QAAyB;AACjF,UAAI,YAAY,IAAI;AAEpB,aAAO,YAAY,MAAM,IAAI;AACzB,oBAAY,MAAM,KAAK,cAAc;AAAA;AAGzC,aAAO;AAAA;AAAA,UAGG,cAAc,QAAiC;AACzD,aAAO,KAAK,WAAW;AACnB,YAAI,eAAe,KAAK,uBAAuB,QAAQ;AACvD,uBAAe,eAAe;AAE9B,YAAI,SAAS,KAAK,UAAU,QAAQ;AAEpC,YAAI,WAAW,IAAI;AACf,iBAAO;AAAA;AAGX,YAAI,CAAC,KAAK,WAAW;AACjB,gBAAM,IAAI,MAAM;AAAA;AAAA;AAAA;AAAA,IAKpB,uBAAuB,GAAW,YAAoB,IAAY;AACtE,UAAI,SAAS,UAAU,SAAS,GAAG;AAEnC,eAAS,IAAI,GAAG,IAAK,IAAI,QAAS,KAAK;AACnC,oBAAY,aAAa;AAEzB,YAAI,KAAK,aAAa;AAClB,sBAAY,YAAY;AAAA;AAAA;AAIhC,aAAO;AAAA;AAAA,IAGH,UAAU,GAAW,gBAAgC;AACzD,UAAI,SAAS;AAEb,UAAI,OAAQ,IAAI,KAAK,IAAI,KAAM;AAE/B,eAAS,IAAI,GAAG,IAAI,MAAM,KAAK;AAC3B,YAAI,KAAK,WAAW,SAAS;AACzB,iBAAO;AAAA;AAGX,kBAAU;AAAA;AAGd,aAAO;AAAA;AAAA,IAGH,WAAW,GAAoB;AACnC,UAAI,MAAM,MAAM,MAAM,IAAI;AACtB,eAAO;AAAA;AAGX,UAAI,IAAI,OAAO,MAAM,IAAI,IAAI;AACzB,eAAO;AAAA;AAGX,eAAS,IAAI,IAAI,IAAI,OAAO,KAAK;AAC7B,YAAI,IAAI,MAAM,IAAI;AACd,iBAAO;AAAA;AAAA;AAIf,aAAO,KAAK,YAAY;AAAA;AAAA,IAGpB,YAAY,GAAoB;AACpC,UAAI,IAAI;AACR,UAAI,IAAI,IAAI;AAEZ,aAAQ,KAAI,QAAQ,IAAI;AACpB,cAAM;AACN,UAAE;AAAA;AAGN,UAAI,OAAO;AACX,UAAI,IAAI,QAAQ,MAAM,GAAG;AAEzB,UAAI,MAAM,MAAM,MAAM,IAAI,IAAI;AAC1B,eAAO;AAAA;AAGX,eAAS,IAAI,IAAI,KAAK,GAAG,KAAK;AAC1B,YAAI,QAAQ,GAAG,GAAG;AAElB,YAAI,MAAM,IAAI,IAAI;AACd,iBAAO;AAAA;AAAA;AAIf,aAAO;AAAA;AAAA;;;AC/Hf,gCAAuC,aAAa;AAAA,IACtC,YAAqB;AAC3B,UAAI,IAAI,IAAI,WAAW;AACvB,aAAO,gBAAgB;AAEvB,aAAO,EAAE,KAAK,MAAM;AAAA;AAAA;;;ACP5B,2BAAkC;AAAA,IAG9B,YAAY,MAAc;AACtB,WAAK,eAAe;AAAA;AAAA,IAGxB,OAAO;AACH,aAAO,KAAK,eAAe,KAAK,eAAe,SAAS;AAAA;AAAA;;;ACLhE,gCAAuC,aAAa;AAAA,IAGtC,YAAqB;AAC3B,aAAO,KAAK,gBAAgB,SAAS,OAAO;AAAA;AAAA,UAG1C,eAAe,MAAc;AAC/B,WAAK,kBAAkB,IAAI,aAAa;AACxC,aAAO,MAAM;AAAA;AAAA;",
  "names": []
}
